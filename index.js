// Generated by CoffeeScript 1.6.3
(function() {
  var Tree, ctx, getNth, isSeq, m, processAssocVal, utils, x, _;

  m = require('./lib/mWrap');

  _ = require('lodash');

  utils = require('./lib/utils');

  isSeq = function(x) {
    return m.isVector(x) || m.isList(x);
  };

  getNth = function(target, n) {
    if (m.isMap(target)) {
      if (n === 0) {
        return target;
      } else {
        return m.vector();
      }
    } else if (isSeq(target)) {
      return m.nth(target, n);
    } else {
      throw new Error("getNth called on non-nth-able thing: " + target + " n:" + n);
    }
  };

  Tree = function(val) {
    this._isTree = true;
    this._val = m.jsToClj(val);
    return this;
  };

  Tree.isTree = function(x) {
    return _.isObject(x) && x._isTree;
  };

  processAssocVal = function(x) {
    if (Tree.isTree(x)) {
      return x.val();
    }
    if (notSimple(x)) {
      return m.jsToClj(x);
    }
    return x;
  };

  Tree.prototype.val = function() {
    return this._val;
  };

  Tree.prototype.lift = function(x) {
    return new Tree(x);
  };

  Tree.prototype.inspect = function() {
    m.inspect(this.val());
    return this;
  };

  Tree.prototype.assoc = function(k, v) {
    var val;
    v = processAssocVal(v);
    val = m.assocX(this.val(), k, v);
    return this.lift(val);
  };

  Tree.prototype.get = function(k, v) {
    var val;
    val = m.getX(this.val(), k, v);
    if (isSimple(val)) {
      return val;
    } else {
      return this.lift(val);
    }
  };

  ctx = {
    a: {
      x: 10,
      y: 5
    },
    b: 17,
    c: {
      q: {
        r: 10,
        s: 7
      },
      g: 3
    },
    d: {
      j: 3,
      f: 'e'
    }
  };

  x = new Tree(ctx);

  x.inspect();

  y.inspect();

}).call(this);
